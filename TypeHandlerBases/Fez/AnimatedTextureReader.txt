
using FezEngine.Content;
using FezEngine.Structure;
using FezEngine.Tools;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using System;
using System.Collections.Generic;
using System.Linq;

##GraphicsDevice graphicsDevice input.ContentManager.ServiceProvider.GetService(typeof(IGraphicsDeviceService)).GraphicsDevice;
##width - texture is stored externally
#r reader.ReadInt32();
#w writer.Write((int) -1);
##height - texture is stored externally
#r reader.ReadInt32();
#w writer.Write((int) -1);
FrameWidth Int32
FrameHeight Int32
##data - int32 length; byte[length] data
##as the texture is stored externally, length = 0
#r reader.BaseStream.Seek(reader.ReadInt32(), SeekOrigin.Current);
#w writer.Write((int) 0);
#r List<FrameContent> list = FmbUtil.ReadObject<List<FrameContent>>(reader, xnb);
#r Offsets Enumerable.ToArray<Rectangle>(Enumerable.Select<FrameContent, Rectangle>((IEnumerable<FrameContent>) list, (Func<FrameContent, Rectangle>) (x => x.Rectangle)));
#w Console.WriteLine("TODO: ANIMATED TEXTURE WRITER");
#r Timing new AnimationTiming(0, list.Count - 1, Enumerable.ToArray<float>(Enumerable.Select<FrameContent, float>((IEnumerable<FrameContent>) list, (Func<FrameContent, float>) (x => (float) x.Duration.TotalSeconds))));
#w Console.WriteLine("TODO: ANIMATED TEXTURE WRITER");
#r PotOffset new Vector2((float) (FezMath.NextPowerOfTwo((double) FrameWidth) - FrameWidth), (float) (FezMath.NextPowerOfTwo((double) FrameHeight) - FrameHeight));
#w Console.WriteLine("TODO: ANIMATED TEXTURE WRITER");
